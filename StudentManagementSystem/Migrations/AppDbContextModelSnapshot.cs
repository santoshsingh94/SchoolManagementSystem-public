// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Models;

namespace SchoolManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Annual", b =>
                {
                    b.Property<int>("AnnualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProgrameId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnnualId");

                    b.HasIndex("ProgrameId");

                    b.HasIndex("UserId");

                    b.ToTable("Annuals");

                    b.HasData(
                        new
                        {
                            AnnualId = 1,
                            Description = "Annual Fee Same",
                            Fees = 1000.0,
                            IsActive = true,
                            ProgrameId = 1,
                            Title = "For LKG To Fifth Standard",
                            UserId = 1
                        },
                        new
                        {
                            AnnualId = 2,
                            Description = "Annual Fee Same",
                            Fees = 1500.0,
                            IsActive = true,
                            ProgrameId = 1,
                            Title = "For LKG To Fifth Standard",
                            UserId = 1
                        },
                        new
                        {
                            AnnualId = 3,
                            Description = "Annual Fee Same",
                            Fees = 1800.0,
                            IsActive = true,
                            ProgrameId = 3,
                            Title = "For LKG To Fifth Standard",
                            UserId = 1
                        },
                        new
                        {
                            AnnualId = 4,
                            Description = "Annual Fee Same",
                            Fees = 2000.0,
                            IsActive = true,
                            ProgrameId = 4,
                            Title = "For LKG To Fifth Standard",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AttendanceTime")
                        .HasColumnType("time");

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ClassSubject", b =>
                {
                    b.Property<int>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ClassSubjectId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSubjects");

                    b.HasData(
                        new
                        {
                            ClassSubjectId = 1,
                            ClassTblId = 1,
                            IsActive = true,
                            Name = "Hindi-LKG",
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ClassTbl", b =>
                {
                    b.Property<int>("ClassTblId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassTblId");

                    b.ToTable("ClassTbls");

                    b.HasData(
                        new
                        {
                            ClassTblId = 1,
                            IsActive = true,
                            Name = "LKG"
                        },
                        new
                        {
                            ClassTblId = 2,
                            IsActive = true,
                            Name = "UKG"
                        },
                        new
                        {
                            ClassTblId = 3,
                            IsActive = true,
                            Name = "First Standard"
                        },
                        new
                        {
                            ClassTblId = 4,
                            IsActive = true,
                            Name = "Second Standard"
                        },
                        new
                        {
                            ClassTblId = 5,
                            IsActive = true,
                            Name = "Third Standard"
                        },
                        new
                        {
                            ClassTblId = 6,
                            IsActive = true,
                            Name = "Fourth Standard"
                        },
                        new
                        {
                            ClassTblId = 7,
                            IsActive = true,
                            Name = "Fifth Standard"
                        },
                        new
                        {
                            ClassTblId = 8,
                            IsActive = true,
                            Name = "Sixth Standard"
                        },
                        new
                        {
                            ClassTblId = 9,
                            IsActive = true,
                            Name = "Seventh Standard"
                        },
                        new
                        {
                            ClassTblId = 10,
                            IsActive = true,
                            Name = "Eighth Standard"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DesignationId");

                    b.HasIndex("UserId");

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            DesignationId = 1,
                            IsActive = true,
                            Title = "Principal",
                            UserId = 1
                        },
                        new
                        {
                            DesignationId = 2,
                            IsActive = true,
                            Title = "Voice Principal",
                            UserId = 1
                        },
                        new
                        {
                            DesignationId = 3,
                            IsActive = true,
                            Title = "Teacher",
                            UserId = 1
                        },
                        new
                        {
                            DesignationId = 4,
                            IsActive = true,
                            Title = "Security Guard",
                            UserId = 1
                        },
                        new
                        {
                            DesignationId = 5,
                            IsActive = true,
                            Title = "Cleaner",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeCertification", b =>
                {
                    b.Property<int>("EmployeeCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeCertificationId");

                    b.HasIndex("EmployeeResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeCertifications");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeEducation", b =>
                {
                    b.Property<int>("EmployeeEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleOfDiploma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeEducationId");

                    b.HasIndex("EmployeeResumeId");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeLanguage", b =>
                {
                    b.Property<int>("EmployeeLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeResumeId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proficiency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeLanguageId");

                    b.HasIndex("EmployeeResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeLanguages");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeLeaving", b =>
                {
                    b.Property<int>("EmployeeLeavingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeavingComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeavingReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeLeavingId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeLeaving");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeResume", b =>
                {
                    b.Property<int>("EmployeeResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeResumeId");

                    b.ToTable("EmployeeResumes");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeSalary", b =>
                {
                    b.Property<int>("EmployeeSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SalaryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaryYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeSalaryId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeSalarys");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeSkillId");

                    b.HasIndex("EmployeeResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeWorkExperience", b =>
                {
                    b.Property<int>("EmployeeWorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeWorkExperienceId");

                    b.HasIndex("EmployeeResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeWorkExperiences");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EventTbl", b =>
                {
                    b.Property<int>("EventTblId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventTblId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ExamMark", b =>
                {
                    b.Property<int>("ExamMarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("ObtainMarks")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ExamMarkId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamMarks");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpensesDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ExpenseType", b =>
                {
                    b.Property<int>("ExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseTypeId");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderType = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderType = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderType = "Transgender"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Programe", b =>
                {
                    b.Property<int>("ProgrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProgrameId");

                    b.HasIndex("UserId");

                    b.ToTable("Programes");

                    b.HasData(
                        new
                        {
                            ProgrameId = 1,
                            IsActive = true,
                            Name = "Arts",
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ProgrameId = 2,
                            IsActive = true,
                            Name = "Commerce",
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ProgrameId = 3,
                            IsActive = true,
                            Name = "Science",
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ProgrameId = 4,
                            IsActive = true,
                            Name = "Computer Science",
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ProgrameSession", b =>
                {
                    b.Property<int>("ProgrameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProgrameSessionId");

                    b.HasIndex("ProgrameId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgrameSessions");

                    b.HasData(
                        new
                        {
                            ProgrameSessionId = 1,
                            Description = "Annual Fee Same",
                            Details = "(2020-2021-Arts)LGK to 5th",
                            ProgrameId = 1,
                            RegDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.SchoolLeaving", b =>
                {
                    b.Property<int>("SchoolLeavingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeavingComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeavingReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SchoolLeavingId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolLeavings");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            Name = "A",
                            UserId = 1
                        },
                        new
                        {
                            SectionId = 2,
                            Name = "B",
                            UserId = 1
                        },
                        new
                        {
                            SectionId = 3,
                            Name = "C",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            EndDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2020-2021",
                            StartDate = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AnyCriminalOffence")
                        .HasColumnType("bit");

                    b.Property<double>("BasicSalary")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriminalOffenceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("DisabilityDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoYouHaveAnyDisability")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<bool>("TakingAnyMedication")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.StaffAttendance", b =>
                {
                    b.Property<int>("StaffAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ComingTime")
                        .HasColumnType("time");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffAttendanceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffAttendances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId1")
                        .HasColumnType("int");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PreviousPercentage")
                        .HasColumnType("real");

                    b.Property<string>("PreviousSchool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgrameId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("GenderId1");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProgrameId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.StudentPromote", b =>
                {
                    b.Property<int>("StudentPromoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualFee")
                        .HasColumnType("int");

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmit")
                        .HasColumnType("bit");

                    b.Property<int>("ProgrameSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PromoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentPromoteId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("ProgrameSessionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPromotes");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Description = "",
                            Name = "Hindi",
                            RegDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMarks = 100
                        },
                        new
                        {
                            SubjectId = 2,
                            Description = "",
                            Name = "English",
                            RegDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMarks = 100
                        },
                        new
                        {
                            SubjectId = 3,
                            Description = "",
                            Name = "Math",
                            RegDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMarks = 100
                        },
                        new
                        {
                            SubjectId = 4,
                            Description = "",
                            Name = "Science",
                            RegDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalMarks = 100
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.SubmissionFee", b =>
                {
                    b.Property<int>("SubmissionFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClassTblId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrameId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionFeeId");

                    b.HasIndex("ClassTblId");

                    b.HasIndex("ProgrameId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("SubmissionFees");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.TimeTable", b =>
                {
                    b.Property<int>("TimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimeTableId");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "New Delhi",
                            ContactNo = "8652544148",
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Password = "password",
                            UserName = "admin@gmail.com",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasFilter("[TypeName] IS NOT NULL");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            Description = "Admins are allowed to handle all the modules.",
                            TypeName = "Admin"
                        },
                        new
                        {
                            UserTypeId = 2,
                            Description = "Operators are allowed to handle all the modules with some restrictions.",
                            TypeName = "Operator"
                        },
                        new
                        {
                            UserTypeId = 3,
                            Description = "Teachers are allowed to handle Student and teacher information.",
                            TypeName = "Teacher"
                        },
                        new
                        {
                            UserTypeId = 4,
                            Description = "Students can view their attendance.",
                            TypeName = "Student"
                        },
                        new
                        {
                            UserTypeId = 5,
                            Description = "Accountants can handle all the transactions details.",
                            TypeName = "Accountant"
                        },
                        new
                        {
                            UserTypeId = 6,
                            Description = "Employee have low access than a teacher.",
                            TypeName = "Employee"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Master.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryType = "General"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryType = "OBC"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryType = "SC"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryType = "ST"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Master.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NationalityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            NationalityType = "Indian"
                        },
                        new
                        {
                            NationalityId = 2,
                            NationalityType = "Others"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Master.Religion", b =>
                {
                    b.Property<int>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReligionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReligionId");

                    b.ToTable("Religions");

                    b.HasData(
                        new
                        {
                            ReligionId = 1,
                            ReligionType = "Hindu"
                        },
                        new
                        {
                            ReligionId = 2,
                            ReligionType = "Muslim"
                        },
                        new
                        {
                            ReligionId = 3,
                            ReligionType = "Sikh"
                        },
                        new
                        {
                            ReligionId = 4,
                            ReligionType = "Christian"
                        },
                        new
                        {
                            ReligionId = 5,
                            ReligionType = "Jain"
                        },
                        new
                        {
                            ReligionId = 6,
                            ReligionType = "Buddhist"
                        },
                        new
                        {
                            ReligionId = 7,
                            ReligionType = "Other"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Annual", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.Programe", "Programe")
                        .WithMany("Annuals")
                        .HasForeignKey("ProgrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Annuals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Attendance", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ClassSubject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Designation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Designations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeCertification", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.EmployeeResume", "EmployeeResume")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("EmployeeResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeEducation", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.EmployeeResume", "EmployeeResume")
                        .WithMany("EmployeeEducations")
                        .HasForeignKey("EmployeeResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeLanguage", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.EmployeeResume", "EmployeeResume")
                        .WithMany("EmployeeLanguages")
                        .HasForeignKey("EmployeeResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("EmployeeLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeLeaving", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.Staff", "Staff")
                        .WithMany("EmployeeLeavings")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("EmployeeLeavings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.Staff", "Staff")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.EmployeeResume", "EmployeeResume")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EmployeeWorkExperience", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.EmployeeResume", "EmployeeResume")
                        .WithMany("EmployeeWorkExperiences")
                        .HasForeignKey("EmployeeResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.EventTbl", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("EventTbls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Exam", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Exams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ExamMark", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassSubject", "ClassSubject")
                        .WithMany("ExamMarks")
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Exam", "Exam")
                        .WithMany("ExamMarks")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Student", "Student")
                        .WithMany("ExamMarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("ExamMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Expense", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Programe", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Programes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.ProgrameSession", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.Programe", "Programe")
                        .WithMany("ProgrameSessions")
                        .HasForeignKey("ProgrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Session", "Session")
                        .WithMany("ProgrameSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("ProgrameSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.SchoolLeaving", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("SchoolLeavings")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Student", "Student")
                        .WithMany("SchoolLeavings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("SchoolLeavings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Section", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Sections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Session", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Staff", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Master.Category", null)
                        .WithMany("Staffs")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SchoolManagementSystem.Models.Entities.Designation", "Designation")
                        .WithMany("Staffs")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Gender", null)
                        .WithMany("Staffs")
                        .HasForeignKey("GenderId");

                    b.HasOne("SchoolManagementSystem.Models.Master.Nationality", null)
                        .WithMany("Staffs")
                        .HasForeignKey("NationalityId");

                    b.HasOne("SchoolManagementSystem.Models.Master.Religion", null)
                        .WithMany("Staffs")
                        .HasForeignKey("ReligionId");

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Staffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.StaffAttendance", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.Staff", "Staff")
                        .WithMany("StaffAttendances")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Master.Category", "Category")
                        .WithMany("Students")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("Students")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId1");

                    b.HasOne("SchoolManagementSystem.Models.Master.Nationality", "Nationality")
                        .WithMany("Students")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Programe", "Programe")
                        .WithMany("Students")
                        .HasForeignKey("ProgrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Master.Religion", "Religion")
                        .WithMany("Students")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Session", "Session")
                        .WithMany("Students")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.StudentPromote", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("StudentPromotes")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.ProgrameSession", "ProgrameSession")
                        .WithMany("StudentPromotes")
                        .HasForeignKey("ProgrameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Section", "Section")
                        .WithMany("StudentPromotes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Student", "Student")
                        .WithMany("StudentPromotes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.Subject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Subjects")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.SubmissionFee", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassTbl", "ClassTbl")
                        .WithMany("SubmissionFees")
                        .HasForeignKey("ClassTblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Programe", "Programe")
                        .WithMany("SubmissionFees")
                        .HasForeignKey("ProgrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Student", "Student")
                        .WithMany("SubmissionFees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("SubmissionFees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.TimeTable", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.ClassSubject", "ClassSubject")
                        .WithMany("TimeTables")
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.Staff", "Staff")
                        .WithMany("TimeTables")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Entities.User", "User")
                        .WithMany("TimeTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Entities.User", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
